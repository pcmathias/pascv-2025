---
title: "PASCV Analysis"
format: html
editor: visual
---

## Introduction

This Quarto notebook captures code generated by ChatGPT-o1 in a series of iterative prompts intended to visualize data extracted from a laboratory information system. The data set contains laboratory test orders and results for SARS-CoV-2 PCR testing, with details such as location the order originated from, test order, and time stamps for collection, receipt in lab, and resulting.

Not all code provided by ChatGPT was copied into each successive code chunk. For example, code to load the libraries or the data set were excluded after their first use.

## First Attempt

Prompt: Please provide R code to visualize test volumes for my virology tests performed by my clinical laboratory over time.

```{r}
# Load required libraries
library(ggplot2)
library(dplyr)

# Example Data
# Replace this with your actual data (e.g., loading from a CSV file)
# Ensure your data has at least two columns: "Date" and "TestVolume"
set.seed(42)
data <- data.frame(
  Date = seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "week"), # Weekly data
  TestVolume = sample(50:500, 52, replace = TRUE) # Random test volumes
)

# Ensure the Date column is in Date format
data$Date <- as.Date(data$Date)

# Visualization
plot <- ggplot(data, aes(x = Date, y = TestVolume)) +
  geom_line(color = "blue", size = 1) +       # Line plot for test volumes
  geom_point(color = "darkblue", size = 2) + # Add points for better visibility
  labs(
    title = "Virology Test Volumes Over Time",
    x = "Date",
    y = "Test Volume",
    caption = "Data from Clinical Laboratory"
  ) +
  theme_minimal() +                           # Simplified theme
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 1),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )

# Display the plot
print(plot)
```

```{}
```

## ChatGPT Correction

Prompt: The code with sample data gives me the following error when I run it: "Error in data.frame(Date = seq(as.Date("2023-01-01"), as.Date("2023-12-31"), : arguments imply differing number of rows: 53, 52". Can you help me fix the error?

```{r}
# Example Data (Corrected)
# Generating weekly dates and ensuring consistent dimensions for columns
dates <- seq(as.Date("2023-01-01"), as.Date("2023-12-31"), by = "week") # Generates 53 dates
test_volumes <- sample(50:500, length(dates), replace = TRUE)           # Match the number of dates

data <- data.frame(
  Date = dates,
  TestVolume = test_volumes
)

# Visualization
library(ggplot2)

plot <- ggplot(data, aes(x = Date, y = TestVolume)) +
  geom_line(color = "blue", size = 1) +       # Line plot for test volumes
  geom_point(color = "darkblue", size = 2) + # Add points for better visibility
  labs(
    title = "Virology Test Volumes Over Time",
    x = "Date",
    y = "Test Volume",
    caption = "Data from Clinical Laboratory"
  ) +
  theme_minimal() +                           # Simplified theme
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 1),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )

# Display the plot
print(plot)
```

## Data Import

This section was not prompted and represents modifications to a larger data set that was extracted for the purposes of this presentation. Each row represents a single SARS-CoV-2 result. The code that follows assumes that the following variables are included in the data set (these are specific to our lab information system and may not be generalizable):

-   loc_category: type of location (expressed in text, e.g. outpatient, inpatient)

-   ord_pat_loc_type: mnemonic with more details about the type of location

-   bt_code: battery code indicating the mnemonic for the test order

-   bt_name: battery name indicating the full name of the test order

-   test_code: test code indicating the test component associated with the result value

-   test_name: test name with the full name of the result component

-   collect_ts: timestamp (date and time) of sample collection

-   collect_ts: timestamp (date and time) of sample collection

-   received_ts: timestamp (date and time) of sample receipt in laboratory

-   result_ts: timestamp (date and time) for when the test component was resulted (verified)

-   specimen_desc: text translation of the code entered for the specimen description

-   cap_method: mnemonic indicating the method used to generate the test result (may indicate general method or may indicate specific instrument)

-   result_value: mnemonic for the value of the result, assumies qualitative, categorical output but free text may be included

-   result_translation: result output as text, including a translation of any mnemonics used for the result

```{r}
covid <- read_csv("covid_data.csv") |> 
  mutate(result = result_value) |> 
  filter(collect_ts > '2020-06-01', collect_ts < '2020-10-01') |> 
  filter(bt_code %in% c('CONNCV', 'NCVCOS', 'NCVQLT'))
```

## Data Cleanup

Prompt: My lab data set has observations (rows) that correspond to individual test results that include timestamps for time of collection (collect_ts), time of receipt into the lab (receipt_ts), and time that the lab result was released (result_ts). I have a variable named result that includes the following codes: DET for "Detected", NDET for "Not detected", and INCON for "Inconclusive". There may also be a code that starts with a "Y" or a null value (NA) if the test was cancelled. However there may be some free text in the field following initial code that I want to ignore. Default the output to "Cancelled" if it does not fit the above patterns. Can you please provide me with code to clean up the result field to display only Detected, Not detected, Inconclusive, or Cancelled?

```{r}
covid_data <- covid %>%
  mutate(clean_result = case_when(
    grepl("^DET", result, ignore.case = TRUE) ~ "Detected",
    grepl("^NDET", result, ignore.case = TRUE) ~ "Not detected",
    grepl("^INCON", result, ignore.case = TRUE) ~ "Inconclusive",
    grepl("^Y", result, ignore.case = TRUE) | is.na(result) ~ "Cancelled",
    TRUE ~ "Cancelled" # Fallback for unexpected values (optional)
  ))
```

## Visualization of actual data

Prompt: I am now ready to visualize my data set. Please provide code for a visualization that allows me to see the number of total results (observations) over time, using collect_ts as the time variable. The data set called covid_data includes 3 months of data so a weekly view would be best. I would only like to visualize complete weeks and not weeks that might be truncated at the beginning or end of the data set.

```{r}
# Cleaning and preparing the data
covid_data <- covid_data %>%
  mutate(collect_date = as.Date(collect_ts)) %>%         # Extract the date from timestamp
  mutate(week = floor_date(collect_date, unit = "week")) # Group by week using lubridate

# Filter for complete weeks only
first_complete_week <- min(covid_data$week)
last_complete_week <- max(covid_data$week)
covid_data <- covid_data %>%
  filter(week >= first_complete_week + weeks(1), 
         week <= last_complete_week - weeks(1))

# Aggregate weekly counts
weekly_counts <- covid_data %>%
  group_by(week) %>%
  summarise(total_results_per_week = n()) # Count observations per week

# Visualization
plot <- ggplot(weekly_counts, aes(x = week, y = total_results_per_week)) +
  geom_col(fill = "darkblue") +                # Use bar plot to show counts
  labs(
    title = "Total Results Per Week",
    x = "Week",
    y = "Number of Results",
    caption = "Source: Clinical Laboratory Data"
  ) +
  theme_minimal() +                            # Clean theme
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 0.5),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )

plot
```

## Modification to add additional variable

Prompt: That looks pretty good. I'd like to visualize another variable - the clean_result variable we generated earlier. How would you recommend we incorporate that variable into the visualization?

```{r}
# Assuming your data frame is named `covid_data`
# Ensure `collect_ts` is in datetime format (POSIXct)
covid_data <- covid_data %>%
  mutate(collect_ts = as.POSIXct(collect_ts),       # Convert `collect_ts` if necessary
         collect_date = as.Date(collect_ts))        # Extract date part
         
# Assuming `clean_result` has been created previously, following earlier steps:
# If you haven't created `clean_result`, use the logic from the previous step here.

# Create a grouping variable for the week
covid_data <- covid_data %>%
  mutate(week = floor_date(collect_date, unit = "week")) # Group by week using lubridate

# Filter for complete weeks only
first_complete_week <- min(covid_data$week)
last_complete_week <- max(covid_data$week)
covid_data <- covid_data %>%
  filter(week >= first_complete_week + weeks(1), 
         week <= last_complete_week - weeks(1))

# Aggregate weekly counts by clean_result
weekly_counts_by_result <- covid_data %>%
  group_by(week, clean_result) %>%                 # Group by week and clean_result
  summarise(total_results = n(), .groups = "drop") # Count observations for each category

# Visualization: Stacked Bar Chart
plot_by_result <- ggplot(weekly_counts_by_result, aes(x = week, y = total_results, fill = clean_result)) +
  geom_bar(stat = "identity") +                    # Stacked bar chart
  labs(
    title = "Weekly Test Results by Result Type",
    x = "Week",
    y = "Number of Results",
    fill = "Result Type",
    caption = "Source: Clinical Laboratory Data"
  ) +
  theme_minimal() +                                # Clean theme
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 0.5),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    legend.position = "bottom"                    # Place legend at the bottom
  )

plot_by_result
```

## Plot Positivity

Prompt: As opposed to looking at overall volumes of testing categorized by their results, I'd like to look at percent positivity over time, counting the "Detected" result as positive. I would also like to exclude any results that were categorized as "Cancelled".

```{r}

# Assuming your data frame is named `covid_data`
# Ensure `collect_ts` is in datetime format (POSIXct)
covid_data <- covid_data %>%
  mutate(collect_ts = as.POSIXct(collect_ts),       # Convert `collect_ts` if necessary
         collect_date = as.Date(collect_ts))        # Extract date part

# Exclude "Cancelled" results
covid_data <- covid_data %>%
  filter(clean_result != "Cancelled")               # Remove "Cancelled" rows

# Create a grouping variable for the week
covid_data <- covid_data %>%
  mutate(week = floor_date(collect_date, unit = "week")) # Group by week using lubridate

# Filter for complete weeks only
first_complete_week <- min(covid_data$week)
last_complete_week <- max(covid_data$week)
covid_data <- covid_data %>%
  filter(week >= first_complete_week + weeks(1), 
         week <= last_complete_week - weeks(1))

# Calculate weekly positivity rates
positivity_by_week <- covid_data %>%
  group_by(week) %>%
  summarise(
    total_tests = n(),                              # Count total valid tests per week
    positive_tests = sum(clean_result == "Detected"), # Count "Detected" results per week
    positivity_rate = (positive_tests / total_tests) * 100 # Calculate percent positivity
  )

# Visualization: Line Chart
positivity_plot <- ggplot(positivity_by_week, aes(x = week, y = positivity_rate)) +
  geom_line(color = "darkblue", size = 1) +          # Line graph for trends
  geom_point(color = "darkblue", size = 2) +        # Add points for visibility
  scale_y_continuous(labels = scales::percent_format()) + # Format y-axis as percentages
  labs(
    title = "Percent Positivity Over Time",
    x = "Week",
    y = "Positivity Rate (%)",
    caption = "Source: Clinical Laboratory Data"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 0.5),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )

# Print the plot
print(positivity_plot)
```

Prompt: That plot looks mostly correct, including the expected trend, but the positivity rate looks off. It is much higher than I was expecting.

```{r}
positivity_plot <- ggplot(positivity_by_week, aes(x = week, y = positivity_rate)) +
  geom_line(color = "darkblue", size = 1) +
  geom_point(color = "darkblue", size = 2) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Weekly Percent Positivity Rates",
    x = "Week",
    y = "Positivity Rate (%)",
    caption = "Source: Clinical Laboratory Data"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 0.5),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )

# Display the plot
print(positivity_plot)
```

Prompt: These suggestions did not fix the issue. I see that the data in the positivity_by_week data frame looks correct, with percentages between 1 and 5 percent. However the plot has much higher percentages, between 100% and 500%.

```{r}
# Visualization: Correct y-axis handling
positivity_plot <- ggplot(positivity_by_week, aes(x = week, y = positivity_rate)) +
  geom_line(color = "darkblue", size = 1) +
  geom_point(color = "darkblue", size = 2) +
  scale_y_continuous(labels = function(x) paste0(x, "%")) +  # Label y-axis as percentages
  labs(
    title = "Percent Positivity Over Time",
    x = "Week",
    y = "Positivity Rate (%)",
    caption = "Source: Clinical Laboratory Data"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 0.5),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5)
  )

# Print the plot
print(positivity_plot)
```

## Splitting by location

Prompt: Now I'd like to plot positivity but separate trends by the type of location from which the order was placed. I'd like to use the loc_category variable, where we have 4 different categories of locations.

```{r}

# Ensure `collect_ts` is in datetime format (POSIXct)
covid_data <- covid_data %>%
  mutate(collect_ts = as.POSIXct(collect_ts),       # Convert `collect_ts` if necessary
         collect_date = as.Date(collect_ts))        # Extract date part

# Exclude "Cancelled" results
covid_data <- covid_data %>%
  filter(clean_result != "Cancelled")               # Remove "Cancelled" rows

# Create a grouping variable for the week
covid_data <- covid_data %>%
  mutate(week = floor_date(collect_date, unit = "week")) # Group by week using lubridate

# Filter for complete weeks only
first_complete_week <- min(covid_data$week)
last_complete_week <- max(covid_data$week)
covid_data <- covid_data %>%
  filter(week >= first_complete_week + weeks(1), 
         week <= last_complete_week - weeks(1))

# Calculate weekly positivity rates stratified by loc_category
positivity_by_loc <- covid_data %>%
  group_by(week, loc_category) %>%
  summarise(
    total_tests = sum(clean_result %in% c("Detected", "Not detected", "Inconclusive")), # Only valid tests
    positive_tests = sum(clean_result == "Detected"), # Count "Detected" results
    positivity_rate = (positive_tests / total_tests) * 100, # Calculate percent positivity
    .groups = "drop"  # Ungroup after summarizing
  )

# Visualization: Line Chart with Facets by loc_category
positivity_plot_by_loc <- ggplot(positivity_by_loc, aes(x = week, y = positivity_rate)) +
  geom_line(color = "darkblue", size = 1) +           # Line graph for trends
  geom_point(color = "darkblue", size = 2) +         # Add points for visibility
  scale_y_continuous(labels = function(x) paste0(x, "%")) + # Label y-axis as percentages
  facet_wrap(~ loc_category) +                        # Create separate plots for each loc_category
  labs(
    title = "Percent Positivity by Location Category Over Time",
    x = "Week",
    y = "Positivity Rate (%)",
    caption = "Source: Clinical Laboratory Data"
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 12),
    axis.title.x = element_text(vjust = -0.5),
    axis.title.y = element_text(vjust = 0.5),
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    strip.text = element_text(size = 14, face = "bold") # Format facet labels
  )

# Print the plot
print(positivity_plot_by_loc)
```
